exp(1.79)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
mu_mh_s <- 2
sigma_mh_s <- 2
nig_lik <- nig_likelihood(x)
nig_p <- nig_prior()
nig_prop <- nig_proposal(mu_mh_s, sigma_mh_s)
nig_prop_d <- nig_prop_density(mu_mh_s, sigma_mh_s)
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_mh <- metropolis_hastings(param_init = list(2, log(30)),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
nig_mh$samples[[2]]
plot(nig_mh$samples[[2]])
lgog(30)
log(30)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
mu_mh_s <- 2
sigma_mh_s <- 2
nig_lik <- nig_likelihood(x)
nig_p <- nig_prior()
nig_prop <- nig_proposal(mu_mh_s, sigma_mh_s)
nig_prop_d <- nig_prop_density(mu_mh_s, sigma_mh_s)
nig_mh <- metropolis_hastings(param_init = list(2, log(30)),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
nig_mh$samples
plot(nig_mh$samples)
plot(nig_mh$samples[[2]])
nig_mh$accept_rate
mu_mh_s <- 2
sigma_mh_s <- 2
nig_lik <- nig_likelihood(x)
nig_p <- nig_prior()
nig_prop <- nig_proposal(mu_mh_s, sigma_mh_s)
nig_prop_d <- nig_prop_density(mu_mh_s, sigma_mh_s)
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_mh <- metropolis_hastings(param_init = list(2, 30),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
nig_mh$samples
plot(nig_mh$samples[[2]])
exp(5.3)
mu_mh_s <- 2
sigma_mh_s <- 10
nig_lik <- nig_likelihood(x)
nig_p <- nig_prior()
nig_prop <- nig_proposal(mu_mh_s, sigma_mh_s)
nig_prop_d <- nig_prop_density(mu_mh_s, sigma_mh_s)
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_mh <- metropolis_hastings(param_init = list(2, 30),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
nig_mh$samples[[2]]
exp(4.5)
nig_hmc <- hmc(param_init = c(2, 1), nig_pot, nig_grad,
.001, 50, 10)
nig_hmc$samples
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/hmc.R')
nig_hmc <- hmc(param_init = c(1, 5), nig_pot, nig_grad,
.001, 50, 10)
q
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/hmc.R')
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/hmc.R')
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/hmc.R')
nig_hmc <- hmc(param_init = c(1, 5), nig_pot, nig_grad,
.001, 50, 10)
p
q
U_curr
p
q
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/hmc.R')
nig_hmc <- hmc(param_init = c(1, 5), nig_pot, nig_grad,
.001, 50, 10)
nig_hmc$samples[[1]]
nig_hmc$samples[[2]]
nig_hmc$samples\
nig_hmc$samples
nig_hmc <- hmc(param_init = c(1, 5), nig_pot, nig_grad,
.001, 50, S)
nig_hmc$samples
plot(nig_hmc$samples[, 2])
plot(nig_hmc$samples[, 1])
nig_hmc <- hmc(param_init = c(3, 1), nig_pot, nig_grad,
.001, 50, S)
nig_hmc$samples
plot(nig_hmc$samples)
nig_gibbs <- gibbs(c(1, 10), S, nig_cond_mu(x), nig_cond_sigma(x))
nig_gibbs[1,]
nig_gibbs[,1]
plot(nig_gibbs[,1])
plot(nig_gibbs[,2])
plot(nig_hmc[,2])
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 50, S)
nig_hmc$samples[,2]
plot(nig_hmc$samples[,2])
nig_mh <- metropolis_hastings(param_init = list(1, 10),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
nig_mh$samples[[2]]
plot(nig_mh$samples[[2]])
plot(nig_hmc$samples[,2])
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
nig_mh <- metropolis_hastings(param_init = list(1, 10),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
nig_gibbs <- gibbs(c(1, 10), S, nig_cond_mu(x), nig_cond_sigma(x))
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 50, S)
nig_hmc$samples[,2]
plot(nig_hmc$samples[,2])
plot(nig_mh$samples[[2]])
dnorm(x, params[[1]], params[[2]], log = TRUE)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
mu_mh_s <- 2
sigma_mh_s <- 10
nig_lik <- nig_likelihood(x)
nig_p <- nig_prior()
nig_prop <- nig_proposal(mu_mh_s, sigma_mh_s)
nig_prop_d <- nig_prop_density(mu_mh_s, sigma_mh_s)
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_mh <- metropolis_hastings(param_init = list(1, 10),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
params
sum(dnorm(x, params[[1]], params[[2]], log = TRUE))
params[[1]]
params[[2]]
nig_gibbs <- gibbs(c(1, 10), S, nig_cond_mu(x), nig_cond_sigma(x))
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 50, S)
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.01, 50, S)
nig_hmc$samples[[1]]
nig_hmc$samples
nig_hmc$samples[,2]
plot(nig_hmc$samples[,2])
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.0001, 50, S)
plot(nig_hmc$samples[,2])
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 100, S)
nig_hmc$samples[,2]
plot(nig_hmc$samples[,2])
S <- 20000
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 100, S)
nig_hmc$samples[,2]
plot(nig_hmc$samples[,2])
nig_gibbs <- gibbs(c(1, 10), S, nig_cond_mu(x), nig_cond_sigma(x))
nig_gibbs
nig_gibbs[,2]
plot(nig_gibbs[,2])
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 200, S)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
nig_hmc$samples[[2]]
nig_hmc$samples[,2]
plot(nig_hmc$samples[,2])
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
nig_likelihood <- function(x) {
n <- length(x)
function(params) {
#sum(dnorm(x, params[[1]], params[[2]], log = TRUE))
v <- params[[2]]
mu <- params[[1]]
- ((n + 2) / 2) * log(v) - sum((x - mu) ^ 2) / (2 * v)
}
}
nig_prior <- function() {
function(params) {
0#* log(params[[2]])
}
}
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
mu_mh_s <- 2
sigma_mh_s <- 10
nig_lik <- nig_likelihood(x)
nig_p <- nig_prior()
nig_prop <- nig_proposal(mu_mh_s, sigma_mh_s)
nig_prop_d <- nig_prop_density(mu_mh_s, sigma_mh_s)
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_mh <- metropolis_hastings(param_init = list(1, 10),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
nig_mh$samples[[1]]
nig_mh$samples[[2]]
plot(nig_mh$samples[[2]])
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
nig_U <- function(x) {
n <- length(x)
function(params) {
v <- params[2]
mu <- params[1]
-  (((n + 2) / 2) * log(v) - sum((x - mu) ^ 2) / (2 * v))
}
}
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
mu_mh_s <- 2
sigma_mh_s <- 10
nig_lik <- nig_likelihood(x)
nig_p <- nig_prior()
nig_prop <- nig_proposal(mu_mh_s, sigma_mh_s)
nig_prop_d <- nig_prop_density(mu_mh_s, sigma_mh_s)
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 200, S)
nig_hmc$samples
plot(nig_hmc$samples)
plot(nig_hmc$samples[,2])
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 50, S)
plot(nig_hmc$samples[,2])
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.01, 50, S)
plot(nig_hmc$samples[,2])
plot(nig_hmc$samples[,2])
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.01, 10, S)
plot(nig_hmc$samples[,2])
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 50, S)
nig_hmc$samples
plot(nig_hmc$samples[, 2])
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 50, S)
nig_hmc$samples
nig_hmc$samples[,2]
plot(nig_hmc$samples[,2])
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.01, 50, S)
plot(nig_hmc$samples[,2])
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/nig.R')
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.01, 50, S)
nig_hmc$samples
plot(nig_hmc$samples[, 2])
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.001, 50, S)
nig_hmc$samples[,2]
plot(nig_hmc$samples[,2])
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.05, 50, S)
nig_hmc$samples[,2]
plot(nig_hmc$samples[,2])
mean(nig_hmc$samples[,2])
mean(na.rm=TRUE,nig_hmc$samples[,2])
mean(nig_gibbs[,2])
mean(nig_gibbs[,2], na.rm = T)
mean(nig_mh[,2], na.rm = T)
mean(nig_mh$samples[[2]], na.rm = T)
plot_grid <- seq(-2, 2, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, sqrt(alpha * lambda / bet) *
dt(plot_grid, df = n - 3) - mean(x))
plot_grid <- seq(-2, 2, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, sqrt(alpha * lambda / bet) *
dt(plot_grid, df = n - 3) - mean(x))
mean(x)
plot_grid <- seq(-2, 2, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, sqrt(alpha * lambda / bet) *
dt(plot_grid, df = 2 * (n - 3)), - mean(x))
plot_grid <- seq(-2, 2, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, sqrt(alpha * lambda / bet) *
dt(plot_grid, df = 2 * (n - 3)) - mean(x))
plot_grid <- seq(-2, 2, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, sqrt(alpha * lambda / bet) *
dt(plot_grid, df = 2 * (n - 3)) + mean(x))
plot_grid <- seq(-2, 2, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, sqrt(alpha * lambda / bet) *
dt(plot_grid, df = n + 4) - mean(x))
dt(plot_grid, df = n + 4) - mean(x)
sqrt(alpha * lambda / bet)
sqrt(alpha * lambda / bet) *
dt(plot_grid, df = n + 4) - mean(x)
plot_grid <- seq(-2, 2, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
plot_grid <- seq(-2, 2, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, sqrt(alpha * lambda / bet) *
(dt(plot_grid, df = 2 * alpha) - tau))
?dt
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha)
plot_grid <- seq(-2, 2, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-3, 2, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-4, 4, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
n <- 200
S <- 10000
x <- rnorm(n, 0, 5)
tau <- mean(x)
lambda <- n
alpha <- (n + 4) / 2
bet <- .5 * (sum(x ^ 2) - n * mean(x) ^ 2)
mu_mh_s <- 2
sigma_mh_s <- 10
nig_lik <- nig_likelihood(x)
nig_p <- nig_prior()
nig_prop <- nig_proposal(mu_mh_s, sigma_mh_s)
nig_prop_d <- nig_prop_density(mu_mh_s, sigma_mh_s)
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_mh <- metropolis_hastings(param_init = list(1, 10),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
nig_gibbs <- gibbs(c(1, 10), S, nig_cond_mu(x), nig_cond_sigma(x))
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
)
}""
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.05, 50, S)
plot_grid <- seq(-4, 4, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 100)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 100)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-4, 4, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 100)
lines(plot_grid,
dt((alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-4, 4, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 100)
lines(plot_grid,
dt((alpha * lambda / bet) ^ (-.5) * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-4, 4, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 100)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-2, 2, .01)
hist(nig_gibbs[, 1], breaks = 25, probability = TRUE)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
hist(nig_gibbs[, 2], breaks = 25, xlim = c(0, 100), probability = TRUE)
lines(plot_grid, dinvgamma(plot_grid, alpha, bet))
plot_grid <- seq(0, 60, .1)
hist(nig_gibbs[, 2], breaks = 25, xlim = c(0, 100), probability = TRUE)
lines(plot_grid, dinvgamma(plot_grid, alpha, bet))
plot_grid <- seq(.01, 50, .01)
hist(nig_mh$samples[[2]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, dinvgamma(plot_grid, alpha, bet))
plot_grid <- seq(-4, 4, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 100)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-2, 2, .01)
hist(nig_gibbs[, 1], breaks = 25, probability = TRUE)
lines(plot_grid,
dt((alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
(alpha * lambda / bet)
plot_grid <- seq(-2, 2, .01)
hist(nig_gibbs[, 1], breaks = 25, probability = TRUE)
lines(plot_grid,
dt((alpha * lambda / bet) ^2 * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-2, 2, .01)
hist(nig_gibbs[, 1], breaks = 25, probability = TRUE)
lines(plot_grid,
dt((alpha * lambda / bet) ^ .25 * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-2, 2, .01)
hist(nig_gibbs[, 1], breaks = 25, probability = TRUE)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet)  * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-2, 2, .01)
hist(nig_gibbs[, 1], breaks = 25, probability = TRUE)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau), df =  alpha))
plot_grid <- seq(-2, 2, .01)
hist(nig_gibbs[, 1], breaks = 25, probability = TRUE)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau), df =  alpha/2))
plot_grid <- seq(-4, 4, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 100)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
dnig <- function(m, v, mu, lambda, alpha, bet) {
sqrt(lambda / 2 * pi * v) *
(bet ^ alpha) / (gamma(alpha)) * v ^ (- alpha - 1) *
exp(- (2 * bet + lambda * (m - mu) ^ 2) / (2 * v ^ 2))
}
dnig(0, 1, tau, lambda, alpha, bet)
alpha
dnig(1, 1, tau, lambda, alpha, bet)
sqrt(lambda / 2 * pi * 1)
(bet ^ alpha) / (gamma(alpha)) * 1 ^ (- alpha - 1)
(bet ^ alpha) / (gamma(alpha)) * 2 ^ (- alpha - 1)
gamma(alpha)
lgamma(alpha)
dnig(mean(x), 30, tau, lambda, alpha, bet)
source('~/.active-rstudio-document', echo=TRUE)
dnig <- function(m, v, mu, lambda, alpha, bet) {
sqrt(lambda / 2 * pi * v) *
((bet ^ alpha) / (gamma(alpha))) * v ^ (- alpha - 1) *
exp(- (2 * bet + lambda * (m - mu) ^ 2) / (2 * v ^ 2))
}
dnig <- function(m, v, mu, lambda, alpha, bet) {
sqrt(lambda / 2 * pi * v) *
((bet ^ alpha) / (gamma(alpha))) * v ^ (- alpha - 1) *
exp(- (2 * bet + lambda * (m - mu) ^ 2) / (2 * v ^ 2))
}
dnig(0, 30, tau, lambda, alpha, tau)
dir()
library(ggplot2)
set.seed(1)
n <- 100
prop <- rep(1/3, 3)
u <- runif(n)
x <- (u < 1/3) * rmvnorm(n, c(-1, -1), .1 * diag(2)) +
(1/3 < u) * (u < 2/3) * rmvnorm(n, c(2, 2), .3 * diag(2)) +
(u > 2/3) * rmvnorm(n, c(2, -3), .5 * diag(2))
x %>% as_data_frame() %>%
ggplot(aes(x = V1, y = V2)) +
geom_density_2d()
mixture_data = list(N = n, D = 2, K = 3, y = x)
fit = stan(model_code = mix_model, data = mixture_data, iter = 11000,
warmup = 1000, chains = 1)
library(rstan)
fit = stan(model_code = mix_model, data = mixture_data, iter = 11000,
warmup = 1000, chains = 1)
mix_model
fit = stan(model_code = mix_model, data = mixture_data, iter = 11000,
warmup = 1000, chains = 1)
mu1=c(0,0,0,0)
sigma1=matrix(c(0.1,0,0,0,0,0.1,0,0,0,0,0.1,0,0,0,0,0.1),ncol=4,nrow=4, byrow=TRUE)
norm1=mvrnorm(30, mu1, sigma1)
#second cluster
mu2=c(7,7,7,7)
sigma2=sigma1
norm2=mvrnorm(30, mu2, sigma2)
#third cluster
mu3=c(3,3,3,3)
sigma3=sigma1
norm3=mvrnorm(30, mu3, sigma3)
norms=rbind(norm1,norm2,norm3) #combine the 3 mixtures together
N=90 #total number of data points
Dim=4 #number of dimensions
y=array(as.vector(norms), dim=c(N,Dim))
mixture_data=list(N=N, D=4, K=3, y=y)
fit = stan(model_code = mix_model, data = mixture_data, iter = 11000,
warmup = 1000, chains = 1)
install.packages(c("rstan", "StanHeaders"))
install.packages(c("rstan", "StanHeaders"))
install.packages(c("rstan", "StanHeaders"))
install.packages(c("rstan", "StanHeaders"))
install.packages(c("rstan", "StanHeaders"))
library(rstan)
