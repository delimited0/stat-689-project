h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topleft",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2), main = "Simulation")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2),
main = "Simulation", xlab = "x")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
n <- 7
S <- 500
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2),
main = "Simulation", xlab = "x")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
rWishart(1, 4, diag(2))
rWishart(1, 4, diag(2))
rWishart(1, 4, diag(2))
rWishart(1, 1, diag(2))
rWishart(1, 4, diag(2))
rWishart(1, 4, diag(2))
a <- rgamma(1000, 2, 2)
b <- rWishart(1000, 3, diag(2))
b
b[, 1, 1]
b[1, 1, ]
b <- rWishart(1000, 2, diag(2))
summary(a)
summary(b)
b <- rWishart(1000, 4, diag(2))
summary(a)
summary(b)
b <- rWishart(1000, 3, diag(2))
summary(a)
summary(b)
a <- rgamma(1000, 2, 2)
b <- rWishart(1000, 2.5, diag(2))
summary(a)
summary(b)
a <- rgamma(1000, 2, 2)
b <- rWishart(1000, 1.5, diag(2))
summary(a)
summary(b)
b <- rWishart(1000, 1, diag(2))
b <- rWishart(1000, 2, diag(2))
summary(a)
summary(b)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1287)
n <- 100
d <- 7
betastarm <- runif(d,min=0.25,max=1.75) sgn = 2*rbinom(d,1,0.5) - 1
set.seed(1287)
n <- 100
d <- 7
betastarm <- runif(d,min=0.25,max=1.75)
sgn <- 2*rbinom(d,1,0.5) - 1
betastar <- betastarm*sgn
X <- matrix(rnorm(n*d),nrow=n)
X[,3] <- sqrt(0.98)*X[,1] + sqrt(0.02)*X[,3] X[,4] = sqrt(0.95)*X[,1] +
set.seed(1287)
n <- 100
d <- 7
betastarm <- runif(d,min=0.25,max=1.75)
sgn <- 2*rbinom(d,1,0.5) - 1
betastar <- betastarm*sgn
X <- matrix(rnorm(n*d),nrow=n)
X[,3] <- sqrt(0.98)*X[,1] + sqrt(0.02)*X[,3]
X[,4] <- sqrt(0.95)*X[,1] + sqrt(0.05)*X[,4]
mustar <- X %*% betastar
sigstar <- 1.50
y <- mustar + sigstar * rt(n, df = 4)
betastarm
invgamma
library(invgamma)
X
betastar
rgamma(3, 1:3, 1:3)
rgamma(3, 1:3, 1:3)
rgamma(3, c(1, 10, 100), 1:3)
rgamma(3, c(1, 10, 100), 1:3)
rgamma(3, 1:3, 1:3)
shape
rate
rgamma(3, 1:3, 1)
rgamma(3, c(1, 10, 100), 1)
rgamma(3, c(1, 10, 100), 1)
a <- 2; b <- 2
library(mvtnorm)
y_lik <- function(xi, tau) {
M <- (X %*% t(X) / xi) + diag(1 / tau)
det(M) ^ (- 1 / 2) * ((b + t(y) %*% solve(M) %*% y) / 2) ^ (- (n + a) / 2)
}
sigma_xi <- 1
a <- 2; b <- 2
beta_samples <- matrix(NA, nrow = S, ncol = d)
S <- 10000
B <- 1000
a <- 2; b <- 2
beta_samples <- matrix(NA, nrow = S, ncol = d)
sigma_samples <- rep(NA, S)
xi_samples <- rep(NA, S)
tau_samples <- matrix(NA, nrow = S, ncol = n)
beta_samples[1, ] <- rep(1, d)
sigma_samples[1] <- 1
xi_samples[1] <- 1
tau_samples[1, ] <- rep(1, n)
y_lik <- function(xi, tau) {
M <- (X %*% t(X) / xi) + diag(1 / tau)
det(M) ^ (- 1 / 2) * ((b + t(y) %*% solve(M) %*% y) / 2) ^ (- (n + a) / 2)
}
sigma_xi <- 1
k <- 2
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k]) /
(2 * sigma_samples[k])
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
rate
beta_samples[k - 1, ]
y - X %*% beta_samples[k - 1, ]
4 * sigma_samples[k]
sigma_samples[k]
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k])
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
rate
4 * sigma_samples[k - 1]
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k - 1])
rate
2 + 4 * sigma_samples[k - 1]) /
rate <- ((y - X %*% beta_samples[k - 1, ]) ^ 2 + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k - 1])
rate
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
tau_samples[k,]
rate <- tau_samples[k, ] %*% (y - X %*% beta_samples[k - 1, ]) +
xi_samples[k - 1] * (beta_samples[k - 1, ] %*% beta_samples[k - 1, ]) + b
rate
library(installR)
library(updateR)
updateR::updateR("D@3dalus")
version
setwd("~/Documents/TAMU/stat_689-statcomp/project/stat-689-project")
install.packages("MCMCpack")
library(MCMCpack)
rdirichlet(1, .1)
rdirichlet(1, rep(.1, 10)
)
)
rdirichlet(1, rep(.1, 10))
1:10 + 1
foo <- list("naveed" = 21, "patrick" = 24)
foo
foo[["naveed"]]
install.packages("mvnfast")
diag(1:10)
diag(5)
foo[[1]]
foo[["naveed"]]
?ddirichlet
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_param_init <- param_init = list(pi = rep(.1, K),
mus = matrix(0, ncol(X), K),
sigmas = rep(1, K))
library(tidyverse)
mnist <- read_csv("mnist.csv")
y <- mnist$label
X <- as.matrix(mnist[, -1])
K <- length(unique(y))
train_id <- sample(1:nrow(X), nrow(X) / 2, FALSE)
test_id <- (1:nrow(X))[-train_id]
image(matrix(X[2530,], nrow = 28))
image(matrix(X[which(y == 10)[2456], ], nrow = 28))
image(matrix(X[2531, ], nrow = 28))
image(matrix(X[2603, ], nrow = 28))
nb_param_init <- param_init = list(pi = rep(.1, K),
mus = matrix(0, ncol(X), K),
sigmas = rep(1, K))
nb_param_init <- list(pi = rep(.1, K),
mus = matrix(0, ncol(X), K),
sigmas = rep(1, K))
source("utility.R")
set.seed(1)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2)
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2)
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2)
pi_posterior(pi_curr, ns, alpha)
alpha
?ddirichlet
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2)
log(ddirichlet(pi_prop, pi_curr))
log(ddirichlet(pi_curr, pi_prop))
pi_posterior(pi_prop, ns, alpha)
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2)
ns
alpha
ns + alpha - 1
(ns + alpha - 1) * log(pi_curr)
(ns + alpha - 1) * log(pi_prop)
pi_curr
pi_prop
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2)
pi_prop
pi_ratio
pi_s
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
mu
dim(mu)
mu %*% mu
mu %*% t(mu)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
library(mvnfast)
nb_metropolis_hastings <- function(param_init, iters, X, y, alpha, a, b,
mu_s = 1 / ncol(X), sigma_s = 1, pi_s = 1) {
# metropolis hastings for Gaussian Naive Bayes
#
# param_init: list with arguments
#     1. pi: vector of class probabilities
#     2. mus: matrix of class means
#     3. sigmas: vector of class variances
#
# iters: number of samples
# X:
# y:
#
# mu_s should be VERY SMALL
ns <- table(y)
K <- length(unique(y))
d <- ncol(X)
pi_posterior <- function(pi, ns, alpha)
sum((ns + alpha - 1) * log(pi))
mu_posterior <- function(mu, sigma, X_sum, n) {
.5 * ((2 * mu %*% X_sum - n * mu %*% t(mu)) / sigma - mu %*% t(mu)
}
sigma_posterior <- function(sigma, mu, X_sum, n) {
- (n * d / 2) * log(sigma) - (a + 1) * log(sigma) - (b / sigma) -
.5 * (2 * mu %*% X_sum - n * mu %*% mu) / sigma
}
param_history <- make_history(param_init, iters)
param_curr <- param_init
accept_pi <- 0; accept_mu <- 0; accept_sigma <- 0
X_sums <- lapply(sort(unique(y)) + 1, function(k) colSums(X[y == k, ]))
for (k in 2:iters) {
# sample pi --
pi_curr <- param_curr[["pi"]]
pi_prop <- rdirichlet(1, rep(pi_s, 10))[1,]
pi_ratio <-
pi_posterior(pi_prop, ns, alpha) + log(ddirichlet(pi_prop, pi_curr)) -
pi_posterior(pi_curr, ns, alpha) - log(ddirichlet(pi_curr, pi_prop))
a <- min(exp(pi_ratio), 1)
if (a > runif(1)) {
param_curr[["pi"]] <- pi_prop
accept_pi <- accept_pi + 1
}
# sample mu --
sigmas <- param_curr[["sigmas"]]
for (j in 1:K) {
mu_curr <- param_curr[["mus"]]
mu_curr_j <- mu_curr[, j]
mu_prop_j <- rmvn(n = 1, mu = mu_curr_j, sigma = mu_s * diag(d))
mu_ratio <-
mu_posterior(mu_prop_j, sigmas[j], X_sums[[j]], ns[j]) -
mu_posterior(mu_curr_j, sigmas[j], X_sums[[j]], ns[j])
a <- min(exp(mu_ratio), 1)
if (a > runif(1)) {
param_curr[["mus"]] <- mu_prop_j
accept_mu <- accept_mu + 1
}
}
# sample sigma --
mus <- param_curr[["mus"]]
for (j in 1:K) {
sigma_curr <- param_curr[["sigmas"]]
sigma_curr_j <- sigma_curr[j]
sigma_prop_j <- rnorm(n = 1, mu = sigma_curr_j, sigma = sigmas_s)
if (sigma_prop_j < 0)
sigma_prop_j <- - sigma_prop_j
sigma_ratio <-
sigma_posterior(sigma_prop_j, mus[, j], X_sums[[j]], ns[j]) -
sigma_posterior(sigma_curr_j, mus[, j], X_sums[[j]], ns[j])
a <- min(exp(sigma_ratio), 1)
if (a > runif(1)) {
param_curr[["sigmas"]] <- sigma_prop_j
accept_sigma <- accept_sigma + 1
}
}
param_history <- save_sample(param_history, param_curr, k)
}
list(samples = param_history,
accept_rate = c("accept_pi" = accept_pi,
"accept_mu" = accept_mu,
"accept_sigma" = accept_sigma
) / iters
)
}
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
dim(X_sum)
mu %*% X_sum
mu %*% t(mu)
mu %*% t(mu)
mu %*% t(mu)
mu %*% X_sum
.5 * ((2 * mu %*% X_sum - n * mu %*% t(mu)) / sigma - mu %*% t(mu))
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
mu
X_sum
hist(X_sum)
summary(X_sum)
mu
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
summary(mu_prop_j)
accept_pi
sigmas[j]
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
mu_curr
mu_ratio
mu_prop_j
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
rnorm(n = 1, mean = sigma_curr_j, sd = sigma_s)
sigma_ratio
sigma_ratio
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
nb_mh$accept_rate
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes_mh.R')
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 10, X, y, .1, 2, 2,
pi_s = 100)
nb_mh$accept_rate
nb_mh$samples$sigmas
nb_mh$samples$mus
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 100, X, y, .1, 2, 2,
pi_s = 100)
nb_mh$accept_rate
dim(nb_mh$samples$mus)
apply(nb_mh$samples$mus, c(2, 3), mean)
dim(nb_mh$samples$mus)
image(apply(nb_mh$samples$mus[-101,,], c(2, 3), mean))
nb_mh$samples$mus[-101, , 1]
image(apply(nb_mh$samples$mus[-101, , ], c(1, 2), mean))
image(matrix(nb_mh$samples$mus[100, , 1], nrow = 28))
image(matrix(nb_mh$samples$mus[100, , 2], nrow = 28))
image(matrix(nb_mh$samples$mus[100, , 3], nrow = 28))
image(matrix(nb_mh$samples$mus[100, , 4], nrow = 28))
image(matrix(nb_mh$samples$mus[100, , 5], nrow = 28))
dim(nb_mh$samples$mus[100, , 5])
length(nb_mh$samples$mus[100, , 5])
nb_gibbs <- gibbs(nb_param_init,
iters = 100,
nb_cond_pi(y, .1),
nb_cond_mu(y, X),
nb_cond_sigmas(y, X, 2, 2))
source("gibbs.R")
nb_gibbs <- gibbs(nb_param_init,
iters = 100,
nb_cond_pi(y, .1),
nb_cond_mu(y, X),
nb_cond_sigmas(y, X, 2, 2))
source("naive_bayes.R")
nb_param_init <- list(pi = rep(.1, K),
mus = matrix(0, ncol(X), K),
sigmas = rep(1, K))
nb_gibbs <- gibbs(nb_param_init,
iters = 100,
nb_cond_pi(y, .1),
nb_cond_mu(y, X),
nb_cond_sigmas(y, X, 2, 2))
image(matrix(nb_gibbs$samples$mus[100, , 5], nrow = 28))
image(matrix(apply(nb_gibbs$samples$mus[-101, , ], c(1, 2), mean), nrow = 28))
image(matrix(apply(nb_gibbs$samples$mus[-101, , ], c(2, 3), mean), nrow = 28))
image(matrix(apply(nb_gibbs$samples$mus[-101, , ], c(1, 3), mean), nrow = 28))
image(matrix(apply(nb_gibbs$samples$mus[-101, , ], c(2, 3), mean), nrow = 28))
dim(nb_gibbs$samples$mus[-101, , 1])
image(matrix(colMeans(nb_gibbs$samples$mus[-101, , 1]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[-101, , 2]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[-101, , 3]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[-101, , 4]), nrow = 28))
image(matrix(colMeans(nb_mh$samples$mus[-101, , 5]), nrow = 28))
image(matrix(colMeans(nb_mh$samples$mus[-101, , 6]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[-101, , 4]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[-101, , 5]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[-101, , 7]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[-101, , 8]), nrow = 28))
?gibbs
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y, .1),
nb_cond_mu(y, X),
nb_cond_sigmas(y, X, 2, 2))
image(matrix(colMeans(nb_gibbs$samples$mus[101:1000, , 8]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[101:1000, , 9]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[101:1000, , 5]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[101:1000, , 3]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[1:1000, , 3]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[1000, , 3]), nrow = 28))
image(matrix(colMeans(nb_gibbs$samples$mus[900:1000, , 3]), nrow = 28))
nb_gibbs$samples$mus[900:1000, , 3]
nb_gibbs$samples$mus[, 1, 1]
nb_gibbs$samples$mus[, 1, 2]
nb_gibbs$samples$mus[, 1, 3]
nb_gibbs$samples$mus[, 1, 4]
nb_gibbs$samples$mus[, 1, 5]
nb_gibbs$samples$mus[, 100, 500]
nb_gibbs$samples$mus[, 100, 100]
nb_gibbs$samples$mus[, 3, 10]
nb_gibbs$samples$mus[, 200, 10]
nb_gibbs$samples$mus[, 500, 10]
nb_gibbs$samples$mus[, 600, 10]
nb_gibbs$samples$mus[, 800, 10]
nb_gibbs$samples$mus[, 455, 10]
image(matrix(colMeans(nb_gibbs$samples$mus[900:1000, , 3]), nrow = 28))
nb_gibbs$samples$mus[350,  ,3]
nb_gibbs$samples$mus[350, 350,3]
nb_gibbs$samples$mus[, 350,3]
nb_gibbs$samples$mus[, 350, 4]
nb_gibbs$samples$mus[, 350, 5]
y[2603]
image(matrix(X[2603, ], nrow = 28))
image(matrix(X[1603, ], nrow = 28))
