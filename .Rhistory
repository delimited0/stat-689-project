legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2), main = "Simulation")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2),
main = "Simulation", xlab = "x")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
n <- 7
S <- 500
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2),
main = "Simulation", xlab = "x")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
rWishart(1, 4, diag(2))
rWishart(1, 4, diag(2))
rWishart(1, 4, diag(2))
rWishart(1, 1, diag(2))
rWishart(1, 4, diag(2))
rWishart(1, 4, diag(2))
a <- rgamma(1000, 2, 2)
b <- rWishart(1000, 3, diag(2))
b
b[, 1, 1]
b[1, 1, ]
b <- rWishart(1000, 2, diag(2))
summary(a)
summary(b)
b <- rWishart(1000, 4, diag(2))
summary(a)
summary(b)
b <- rWishart(1000, 3, diag(2))
summary(a)
summary(b)
a <- rgamma(1000, 2, 2)
b <- rWishart(1000, 2.5, diag(2))
summary(a)
summary(b)
a <- rgamma(1000, 2, 2)
b <- rWishart(1000, 1.5, diag(2))
summary(a)
summary(b)
b <- rWishart(1000, 1, diag(2))
b <- rWishart(1000, 2, diag(2))
summary(a)
summary(b)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1287)
n <- 100
d <- 7
betastarm <- runif(d,min=0.25,max=1.75) sgn = 2*rbinom(d,1,0.5) - 1
set.seed(1287)
n <- 100
d <- 7
betastarm <- runif(d,min=0.25,max=1.75)
sgn <- 2*rbinom(d,1,0.5) - 1
betastar <- betastarm*sgn
X <- matrix(rnorm(n*d),nrow=n)
X[,3] <- sqrt(0.98)*X[,1] + sqrt(0.02)*X[,3] X[,4] = sqrt(0.95)*X[,1] +
set.seed(1287)
n <- 100
d <- 7
betastarm <- runif(d,min=0.25,max=1.75)
sgn <- 2*rbinom(d,1,0.5) - 1
betastar <- betastarm*sgn
X <- matrix(rnorm(n*d),nrow=n)
X[,3] <- sqrt(0.98)*X[,1] + sqrt(0.02)*X[,3]
X[,4] <- sqrt(0.95)*X[,1] + sqrt(0.05)*X[,4]
mustar <- X %*% betastar
sigstar <- 1.50
y <- mustar + sigstar * rt(n, df = 4)
betastarm
invgamma
library(invgamma)
X
betastar
rgamma(3, 1:3, 1:3)
rgamma(3, 1:3, 1:3)
rgamma(3, c(1, 10, 100), 1:3)
rgamma(3, c(1, 10, 100), 1:3)
rgamma(3, 1:3, 1:3)
shape
rate
rgamma(3, 1:3, 1)
rgamma(3, c(1, 10, 100), 1)
rgamma(3, c(1, 10, 100), 1)
a <- 2; b <- 2
library(mvtnorm)
y_lik <- function(xi, tau) {
M <- (X %*% t(X) / xi) + diag(1 / tau)
det(M) ^ (- 1 / 2) * ((b + t(y) %*% solve(M) %*% y) / 2) ^ (- (n + a) / 2)
}
sigma_xi <- 1
a <- 2; b <- 2
beta_samples <- matrix(NA, nrow = S, ncol = d)
S <- 10000
B <- 1000
a <- 2; b <- 2
beta_samples <- matrix(NA, nrow = S, ncol = d)
sigma_samples <- rep(NA, S)
xi_samples <- rep(NA, S)
tau_samples <- matrix(NA, nrow = S, ncol = n)
beta_samples[1, ] <- rep(1, d)
sigma_samples[1] <- 1
xi_samples[1] <- 1
tau_samples[1, ] <- rep(1, n)
y_lik <- function(xi, tau) {
M <- (X %*% t(X) / xi) + diag(1 / tau)
det(M) ^ (- 1 / 2) * ((b + t(y) %*% solve(M) %*% y) / 2) ^ (- (n + a) / 2)
}
sigma_xi <- 1
k <- 2
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k]) /
(2 * sigma_samples[k])
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
rate
beta_samples[k - 1, ]
y - X %*% beta_samples[k - 1, ]
4 * sigma_samples[k]
sigma_samples[k]
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k])
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
rate
4 * sigma_samples[k - 1]
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k - 1])
rate
2 + 4 * sigma_samples[k - 1]) /
rate <- ((y - X %*% beta_samples[k - 1, ]) ^ 2 + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k - 1])
rate
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
tau_samples[k,]
rate <- tau_samples[k, ] %*% (y - X %*% beta_samples[k - 1, ]) +
xi_samples[k - 1] * (beta_samples[k - 1, ] %*% beta_samples[k - 1, ]) + b
rate
library(installR)
library(updateR)
updateR::updateR("D@3dalus")
version
setwd("~/Documents/TAMU/stat_689-statcomp/project/stat-689-project")
library(tidyverse)
library(rstan)
library(bayesplot)
mnist <- read_csv("digits.csv", col_names = FALSE)
y <- mnist$X65
X <- as.matrix(mnist[, -65])
K <- length(unique(y))
image(matrix(X[65,], nrow = 8))
train_id <- sample(1:nrow(X), nrow(X) / 2, FALSE)
test_id <- (1:nrow(X))[-train_id]
X_train <- X[train_id, ]
y_train <- y[train_id]
X_test <- X[test_id, ]
y_test <- y[test_id]
source("gibbs.R")
source("utility.R")
source("naive_bayes.R")
source("naive_bayes_mh.R")
set.seed(1)
ess
source("gibbs.R")
source("utility.R")
source("naive_bayes.R")
source("naive_bayes_mh.R")
set.seed(1)
nb_param_init <- list(pi = rep(.1, K),
mus = matrix(0, ncol(X_train), K),
sigmas = rep(1, K))
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y_train, .1),
nb_cond_mu(y_train, X_train),
nb_cond_sigmas(y_train, X_train, 2, 2))
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 1000, X_train, y_train,
.1, 2, 2, pi_s = 100)
colMeans(nb_mh$samples$mus[101:1000, , 3]) %>%
matrix(nrow = 8) %>% image
colMeans(nb_gibbs$samples$mus[101:1000, , 3]) %>%
matrix(nrow = 8) %>% image
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes.R')
system.time()
system.time(a = 2)
system.time(expr = {a = 2})
debugSource('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/naive_bayes.R')
nb_hmc <- nb_hmc_model(y_train, X_train, rep(.1, 10), 2, 2)
dim(mu)
mu[1,]
t(mu[1,])
sigmas[k] * identity
sigmas[k] * identity
sigmas[1] * identity
nrow(X_train)
train_id <- sample(1:nrow(X), nrow(X) / 10, FALSE)
train_id <- sample(1:nrow(X), nrow(X) / 15, FALSE)
train_id <- sample(1:nrow(X), nrow(X) / 20, FALSE)
train_id <- sample(1:nrow(X), nrow(X) / 20, FALSE)
test_id <- (1:nrow(X))[-train_id]
X_train <- X[train_id, ]
y_train <- y[train_id]
X_test <- X[test_id, ]
y_test <- y[test_id]
mnist_stan_dat <- list(K = K, N = nrow(X_train), D = ncol(X_train),
x = X_train, y = y_train + 1,
alpha = rep(.1, K), a = 2, b = 2)
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y_train, .1),
nb_cond_mu(y_train, X_train),
nb_cond_sigmas(y_train, X_train, 2, 2))
)
train_id <- sample(1:nrow(X), nrow(X) / 15, FALSE)
test_id <- (1:nrow(X))[-train_id]
X_train <- X[train_id, ]
y_train <- y[train_id]
X_test <- X[test_id, ]
y_test <- y[test_id]
mnist_stan_dat <- list(K = K, N = nrow(X_train), D = ncol(X_train),
x = X_train, y = y_train + 1,
alpha = rep(.1, K), a = 2, b = 2)
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y_train, .1),
nb_cond_mu(y_train, X_train),
nb_cond_sigmas(y_train, X_train, 2, 2))
y_train %>% unique
y_train %>% unique %>% sort
train_id <- sample(1:nrow(X), nrow(X) / 15, FALSE)
test_id <- (1:nrow(X))[-train_id]
X_train <- X[train_id, ]
y_train <- y[train_id]
X_test <- X[test_id, ]
y_test <- y[test_id]
nb_param_init <- list(pi = rep(.1, K),
mus = matrix(0, ncol(X_train), K),
sigmas = rep(1, K))
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y_train, .1),
nb_cond_mu(y_train, X_train),
nb_cond_sigmas(y_train, X_train, 2, 2))
train_id <- sample(1:nrow(X), nrow(X) / 4, FALSE)
test_id <- (1:nrow(X))[-train_id]
X_train <- X[train_id, ]
y_train <- y[train_id]
X_test <- X[test_id, ]
y_test <- y[test_id]
mnist_stan_dat <- list(K = K, N = nrow(X_train), D = ncol(X_train),
x = X_train, y = y_train + 1,
alpha = rep(.1, K), a = 2, b = 2)
nb_param_init <- list(pi = rep(.1, K),
mus = matrix(0, ncol(X_train), K),
sigmas = rep(1, K))
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y_train, .1),
nb_cond_mu(y_train, X_train),
nb_cond_sigmas(y_train, X_train, 2, 2))
train_id <- sample(1:nrow(X), nrow(X) / 2, FALSE)
test_id <- (1:nrow(X))[-train_id]
X_train <- X[train_id, ]
y_train <- y[train_id]
X_test <- X[test_id, ]
y_test <- y[test_id]
mnist_stan_dat <- list(K = K, N = nrow(X_train), D = ncol(X_train),
x = X_train, y = y_train + 1,
alpha = rep(.1, K), a = 2, b = 2)
nb_param_init <- list(pi = rep(.1, K),
mus = matrix(0, ncol(X_train), K),
sigmas = rep(1, K))
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y_train, .1),
nb_cond_mu(y_train, X_train),
nb_cond_sigmas(y_train, X_train, 2, 2))
train_id <- sample(1:nrow(X), nrow(X) / 3, FALSE)
test_id <- (1:nrow(X))[-train_id]
X_train <- X[train_id, ]
y_train <- y[train_id]
X_test <- X[test_id, ]
y_test <- y[test_id]
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y_train, .1),
nb_cond_mu(y_train, X_train),
nb_cond_sigmas(y_train, X_train, 2, 2))
train_id <- sample(1:nrow(X), 100, FALSE)
train_id <- sample(1:nrow(X), nrow(X) / 3, FALSE)
train_id <- sample(1:nrow(X), nrow(X) / 3, FALSE)
test_id <- (1:nrow(X))[-train_id]
X_train <- X[train_id, ]
y_train <- y[train_id]
X_test <- X[test_id, ]
y_test <- y[test_id]
mnist_stan_dat <- list(K = K, N = nrow(X_train), D = ncol(X_train),
x = X_train, y = y_train + 1,
alpha = rep(.1, K), a = 2, b = 2)
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y_train, .1),
nb_cond_mu(y_train, X_train),
nb_cond_sigmas(y_train, X_train, 2, 2))
#   Map(f = function(x) as.numeric(x[x != ""]), .) %>%
#   do.call(rbind.data.frame, .)
#
# y <- usps[, 1]
# X <- as.matrix(usps[, 2:257])
train_id <- sample(1:nrow(X), nrow(X) / 2, FALSE)
test_id <- (1:nrow(X))[-train_id]
X_train <- X[train_id, ]
y_train <- y[train_id]
X_test <- X[test_id, ]
y_test <- y[test_id]
mnist_stan_dat <- list(K = K, N = nrow(X_train), D = ncol(X_train),
x = X_train, y = y_train + 1,
alpha = rep(.1, K), a = 2, b = 2)
nb_param_init <- list(pi = rep(.1, K),
mus = matrix(0, ncol(X_train), K),
sigmas = rep(1, K))
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y_train, .1),
nb_cond_mu(y_train, X_train),
nb_cond_sigmas(y_train, X_train, 2, 2))
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 1000, X_train, y_train,
.1, 2, 2, pi_s = 100)
source("gibbs.R")
source("utility.R")
source("naive_bayes.R")
source("naive_bayes_mh.R")
nb_param_init <- list(pi = rep(.1, K),
mus = matrix(0, ncol(X_train), K),
sigmas = rep(1, K))
nb_gibbs <- gibbs(nb_param_init,
iters = 1000,
nb_cond_pi(y_train, .1),
nb_cond_mu(y_train, X_train),
nb_cond_sigmas(y_train, X_train, 2, 2))
nb_mh <- nb_metropolis_hastings(nb_param_init, iters = 1000, X_train, y_train,
.1, 2, 2, pi_s = 100)
nb_hmc_draws <- greta::mcmc(nb_hmc, n_samples = 1000, verbose = TRUE)
nb_hmc <- nb_hmc_model(y_train, X_train, rep(.1, 10), 2, 2)
nb_hmc_draws <- greta::mcmc(nb_hmc, n_samples = 1000, verbose = TRUE)
?system.time
colMeans(nb_mh$samples$mus[101:1000, , 3]) %>%
matrix(nrow = 8) %>% image
colMeans(nb_gibbs$samples$mus[101:1000, , 3]) %>%
matrix(nrow = 8) %>% image
colMeans(get_greta_mu(k = 3, draws = nb_hmc_draws)) %>%
matrix(nrow = 8) %>% image
colMeans(get_greta_mu(k = 3, draws = nb_hmc_draws)) %>%
matrix(nrow = 8) %>% image
colMeans(nb_mh$samples$mus[101:1000, , 3]) %>%
matrix(nrow = 8) %>% image
colMeans(nb_gibbs$samples$mus[101:1000, , 3]) %>%
matrix(nrow = 8) %>% image
colMeans(get_greta_mu(k = 3, draws = nb_hmc_draws)) %>%
matrix(nrow = 8) %>% image
nb_hmc_draws[[1]][99 ,21:(21+63)] %>%
matrix(nrow = 8) %>% image
colMeans(get_greta_mu(k = 1, draws = nb_hmc_draws)) %>%
matrix(nrow = 8) %>% image
colMeans(get_greta_mu(k = 1, draws = nb_hmc_draws)) %>%
matrix(nrow = 8) %>% image
colMeans(get_greta_mu(k = 2, draws = nb_hmc_draws)) %>%
matrix(nrow = 8) %>% image
colMeans(get_greta_mu(k = 3, draws = nb_hmc_draws)) %>%
matrix(nrow = 8) %>% image
colMeans(get_greta_mu(k = 4, draws = nb_hmc_draws)) %>%
matrix(nrow = 8) %>% image
colMeans(get_greta_mu(k = 5, draws = nb_hmc_draws)) %>%
matrix(nrow = 8) %>% image
predict_nb(nb_gibbs$samples$mus[10, , ], nb_gibbs$samples$sigmas[10, ],
X_test[1:10, ])
predict_nb(nb_gibbs$samples$mus[10, , ], nb_gibbs$samples$sigmas[10, ],
X_test)
dim(nb_gibbs$samples$mus[101:1000, , ])
apply(nb_gibbs$samples$mus[101:1000, , ], 1, mean)
dim(apply(nb_gibbs$samples$mus[101:1000, , ], 1, mean))
apply(nb_gibbs$samples$mus[101:1000, , ], c(2, 3), mean)
dim(apply(nb_gibbs$samples$mus[101:1000, , ], c(2, 3), mean))
nb_gibbs$samples$sigmas
colMeans(nb_gibbs$samples$sigmas)
colMeans(nb_gibbs$samples$sigmas[101:1000,])
predict_nb(apply(nb_gibbs$samples$mus[101:1000, , ], c(2, 3), mean),
colMeans(nb_gibbs$samples$sigmas[101:1000,]),
X_test)
mh_preds <-
predict_nb(apply(nb_mh$samples$mus[101:1000, , ], c(2, 3), mean),
colMeans(nb_mh$samples$sigmas[101:1000, ]),
X_test)
nb_hmc_draws[[1]]
hmc_mus <- sapply(1:K, function(k) get_greta_mu(k = k, nb_hmc_draws))
hmc_mus <- sapply(1:K, function(k) get_greta_mu(k = k, nb_hmc_draws[[1]]))
hmc_mus <- sapply(1:K, function(k) get_greta_mu(k = k, draws = nb_hmc_draws))
dim(hmc_mus)
hmc_mus <- sapply(1, function(k) get_greta_mu(k = k, draws = nb_hmc_draws))
get_greta_mu(k = 1, draws = nb_hmc_draws)
dim(get_greta_mu(k = 1, draws = nb_hmc_draws))
hmc_mus <- sapply(1:K, function(k) {
colMeans(get_greta_mu(k = k, draws = nb_hmc_draws))
})
apply(nb_gibbs$samples$mus[101:1000, , ], c(2, 3), mean)
dim(apply(nb_gibbs$samples$mus[101:1000, , ], c(2, 3), mean))
nb_hmc_draws[, 1:10, ]
nb_hmc_draws[[, 1:10, ]]
as.matrix(nb_hmc_draws[, 1:10, ])
hmc_sigmas <- colMeans(as.matrix(nb_hmc_draws[, 1:10, ]))
hmc_sigmas
hmc_preds <- predict_nb(hmc_mus, hmc_sigmas, X_test)
hmc_preds
mh_preds
gibbs_preds
gibbs_preds <-
predict_nb(apply(nb_gibbs$samples$mus[101:1000, , ], c(2, 3), mean),
colMeans(nb_gibbs$samples$sigmas[101:1000,]),
X_test)
gibbs_preds
install.packages("caret")
library(caret)
confusionMatrix(gibbs_preds, y_test)
confusionMatrix(factor(gibbs_preds), factor(y_test))
length(gibbs_preds)
length(y_test)
confusionMatrix(as.factor(gibbs_preds), as.factor(y_test))
install.packages("e1071")
confusionMatrix(as.factor(gibbs_preds), as.factor(y_test))
confusionMatrix(as.factor(mh_preds), as.factor(y_test))
confusionMatrix(as.factor(hmc_preds), as.factor(y_test))
hmc_preds <- predict_nb(hmc_mus, hmc_sigmas, X_test) %>% as.factor()
hmc_preds <- predict_nb(hmc_mus, hmc_sigmas, X_test) %>% as.factor() %>%
relevel(ref = gibbs_preds)
gibbs_preds <-
predict_nb(apply(nb_gibbs$samples$mus[101:1000, , ], c(2, 3), mean),
colMeans(nb_gibbs$samples$sigmas[101:1000,]),
X_test) %>% as.factor()
predict_nb(apply(nb_mh$samples$mus[101:1000, , ], c(2, 3), mean),
colMeans(nb_mh$samples$sigmas[101:1000, ]),
X_test) %>% as.factor()
mh_preds <-
predict_nb(apply(nb_mh$samples$mus[101:1000, , ], c(2, 3), mean),
colMeans(nb_mh$samples$sigmas[101:1000, ]),
X_test) %>% as.factor()
hmc_preds <- predict_nb(hmc_mus, hmc_sigmas, X_test) %>% as.factor() %>%
relevel(ref = gibbs_preds)
hmc_preds <- predict_nb(hmc_mus, hmc_sigmas, X_test) %>% as.factor()
levels(hmc_preds) <- levels(gibbs_preds)
levels(hmc_preds)
levels(gibbs_preds)
levels(as.factor(y_test))
levels(mh_preds)
gibbs_preds <-
predict_nb(apply(nb_gibbs$samples$mus[101:1000, , ], c(2, 3), mean),
colMeans(nb_gibbs$samples$sigmas[101:1000,]),
X_test) %>% as.factor()
levels(gibbs_preds)
mh_preds <-
predict_nb(apply(nb_mh$samples$mus[101:1000, , ], c(2, 3), mean),
colMeans(nb_mh$samples$sigmas[101:1000, ]),
X_test) %>% as.factor()
levels(mh_preds)
hmc_preds
levels(hmc_preds)
hmc_preds <- predict_nb(hmc_mus, hmc_sigmas, X_test) %>% as.factor()
levels(hmc_preds)
levels(as.factor(y_train))
levels(as.factor(y_test))
levels(hmc_preds) <- levels(gibbs_preds)
confusionMatrix(mh_preds, as.factor(y_test))
confusionMatrix(gibbs_preds, as.factor(y_test))
confusionMatrix(hmc_preds, as.factor(y_test))
?confusionMatrix
