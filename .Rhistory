simplex[K] theta; //mixing proportions
ordered[D] mu[K]; //mixture component means
cholesky_factor_corr[D] L[K]; //cholesky factor of covariance
}
model {
real ps[K];
for(k in 1:K){
mu[k] ~ normal(0,3);
L[k] ~ lkj_corr_cholesky(4);
}
for (n in 1:N){
for (k in 1:K){
ps[k] = log(theta[k])+multi_normal_cholesky_lpdf(y[n] | mu[k], L[k]); //increment log probability of the gaussian
}
target += log_sum_exp(ps);
}
}'
mu1=c(0,0,0,0)
sigma1=matrix(c(0.1,0,0,0,0,0.1,0,0,0,0,0.1,0,0,0,0,0.1),ncol=4,nrow=4, byrow=TRUE)
norm1=mvrnorm(30, mu1, sigma1)
library(mvtnorm)
mu1=c(0,0,0,0)
sigma1=matrix(c(0.1,0,0,0,0,0.1,0,0,0,0,0.1,0,0,0,0,0.1),ncol=4,nrow=4, byrow=TRUE)
norm1=mvrnorm(30, mu1, sigma1)
library(MASS)
mu1=c(0,0,0,0)
sigma1=matrix(c(0.1,0,0,0,0,0.1,0,0,0,0,0.1,0,0,0,0,0.1),ncol=4,nrow=4, byrow=TRUE)
norm1=mvrnorm(30, mu1, sigma1)
#second cluster
mu2=c(7,7,7,7)
sigma2=sigma1
norm2=mvrnorm(30, mu2, sigma2)
#third cluster
mu3=c(3,3,3,3)
sigma3=sigma1
norm3=mvrnorm(30, mu3, sigma3)
norms=rbind(norm1,norm2,norm3) #combine the 3 mixtures together
N=90 #total number of data points
Dim=4 #number of dimensions
y=array(as.vector(norms), dim=c(N,Dim))
mixture_data=list(N=N, D=4, K=3, y=y)
fit = stan(model_code = mixture_model, data = mixture_data, iter = 11000,
warmup = 1000, chains = 1)
mixture_data = list(N = n, D = 2, K = 3, y = x)
mixture_data = list(N = n, D = 2, K = 3, y = x)
fit = stan(model_code = mixture_model, data = mixture_data, iter = 5000,
warmup = 1000, chains = 1)
fit
extract(fit)
stan_diag(fit)
stan_ac(fit)
stan_ess(fit)
stan_hist(fit)
fit$`mu[1,1]`
fit@mu
fit@`mu[1,1`
fit@`mu[1,1]`
fit$`mu[1,1]`
stan_dens(fit)
stan_trace(fit)
Boston
source('~/Documents/TAMU/stat_689-statcomp/project/stat-689-project/hmc.R')
n
fit$`mu[2,1]`
rstan::extract(fit)
names(rstan::extract(fit))
rstan::extract(fit)$mu
colMeans(rstan::extract(fit)$mu)
dim(rstan::extract(fit)$mu)
apply(rstan::extract(fit)$mu, 1, mean)
dim(apply(rstan::extract(fit)$mu, 1, mean))
apply(rstan::extract(fit)$mu, 2, mean)
apply(rstan::extract(fit)$mu, 3, mean)
rstan::extract(fit)$mu
dim(rstan::extract(fit)$mu)
source("nig.R")
source("metropolis_hastings.R")
source("gibbs.R")
library(invgamma)
set.seed(1)
n <- 200
S <- 10000
x <- rnorm(n, 0, 5)
tau <- mean(x)
lambda <- n
alpha <- (n + 4) / 2
bet <- .5 * (sum(x ^ 2) - n * mean(x) ^ 2)
mu_mh_s <- 2
sigma_mh_s <- 10
nig_lik <- nig_likelihood(x)
nig_p <- nig_prior()
nig_prop <- nig_proposal(mu_mh_s, sigma_mh_s)
nig_prop_d <- nig_prop_density(mu_mh_s, sigma_mh_s)
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_mh <- metropolis_hastings(param_init = list(1, 10),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
source("nig.R")
source("utility.R")
source("hmc.R")
source("metropolis_hastings.R")
source("gibbs.R")
library(invgamma)
set.seed(1)
n <- 200
S <- 10000
x <- rnorm(n, 0, 5)
tau <- mean(x)
lambda <- n
alpha <- (n + 4) / 2
bet <- .5 * (sum(x ^ 2) - n * mean(x) ^ 2)
mu_mh_s <- 2
sigma_mh_s <- 10
nig_lik <- nig_likelihood(x)
nig_p <- nig_prior()
nig_prop <- nig_proposal(mu_mh_s, sigma_mh_s)
nig_prop_d <- nig_prop_density(mu_mh_s, sigma_mh_s)
nig_pot <- nig_U(x)
nig_grad <- nig_dU(x)
nig_mh <- metropolis_hastings(param_init = list(1, 10),
likelihood = nig_lik,
prior = nig_p,
proposal = nig_prop,
prop_density = nig_prop_d,
iters = S)
nig_gibbs <- gibbs(c(1, 10), S, nig_cond_mu(x), nig_cond_sigma(x))
nig_hmc <- hmc(param_init = c(1, 10), nig_pot, nig_grad,
.05, 50, S)
mcmc(nig_mh$samples[[1]])
library(MCMCpack)
mcmc(nig_mh$samples[[1]])
mh_mu <- mcmc(nig_mh$samples[[1]])
gibbs_mu <- mmcmc(nig_gibbs[,1])
mh_mu <- mcmc(nig_mh$samples[[1]])
gibbs_mu <- mcmc(nig_gibbs[,1])
hmc_mu <- mcmc(nig_hmc$samples[,1])
traceplot(mh_mu)
traceplot(gibbs_mu)
library(ggplot2)
traceplot(hmc_mu)
traceplot(gibbs_mu)
traceplot(mh_mu)
effectiveSize(mh_mu)
mh_mu[1]
mh_mu[2]
mh_mu[3]
which(is.na(mh_mu))
mh_mu[10001]
gibbs_mu[10001]
hmc_mu[10001]
mh_mu <- mcmc(nig_mh$samples[[1]][1001:(S-1)])
gibbs_mu <- mcmc(nig_gibbs[1001:(S-1), 1])
hmc_mu <- mcmc(nig_hmc$samples[1001:(S-1), 1])
hmc_mu
effectiveSize(mh_mu)
effectiveSize(gibbs_mu)
effectiveSize(hmc_mu)
effectiveSize(gibbs_mu)
effectiveSize(hmc_mu)
effectiveSize(mh_mu)
effectiveSize(gibbs_mu)
effectiveSize(hmc_mu)
effectiveSize(gibbs_mu)
length(gibbs_mu)
effectiveSize(gibbs_mu)
acfplot(mh_mu)
acfplot(gibbs_mu)
acfplot(hmc_mu)
acfplot(gibbs_mu)
acfplot(mh_mu)
acf(mh_mu)
acf(gibbs_mu)
acf(hmc_mu)
traceplot(gibbs_mu)
effectiveSize(hmc_mu)
traceplot(hmc_mu)
traceplot(mh_mu)
par(mfrow = c(1, 3))
traceplot(mh_mu)
traceplot(gibbs_mu)
traceplot(hmc_mu)
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu)
post_mus
?gather
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
gather(key = method, value = sample)
post_mus
ggplot(post_mus, aes(y = sample)) +
geom_path() +
facet_grid(~ method)
data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(iter <- row_number(.))
data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(iter <- row_number())
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(iter <- row_number())
gather(key = method, value = sample)
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(iter <- row_number()) %>%
gather(key = method, value = sample)
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(iter <- row_number())
View(post_mus)
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(iter = row_number())
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(iter = row_number()) %>%
gather(key = method, value = sample, -iter)
ggplot(post_mus, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(~ method)
?labs
effectiveSize(mh_mu)
effectiveSize(gibbs_mu)
effectiveSize(hmc_mu)
par(mfrow = c(1, 3))
traceplot(mh_mu)
traceplot(gibbs_mu)
traceplot(hmc_mu)
post_mus
c(effectiveSize(mh_mu),
effectiveSize(gibbs_mu)
effectiveSize(hmc_mu))
c(effectiveSize(mh_mu),
effectiveSize(gibbs_mu),
effectiveSize(hmc_mu))
?kable
c(effectiveSize(mh_mu),
effectiveSize(gibbs_mu),
effectiveSize(hmc_mu)) %>%
knitr::kable(format = "markdown", digits = 1,
col.names = c("MH", "Gibbs", "HMC"),
caption = "Effective Sample Size")
c(effectiveSize(mh_mu),
effectiveSize(gibbs_mu),
effectiveSize(hmc_mu)) %>%
knitr::kable(format = "markdown", digits = 1,
caption = "Effective Sample Size")
c(effectiveSize(mh_mu),
effectiveSize(gibbs_mu),
effectiveSize(hmc_mu)) %>%
knitr::kable(format = "markdown", digits = 1,
row.names = c("MH", "Gibbs", "HMC"),
caption = "Effective Sample Size")
c(effectiveSize(mh_mu),
effectiveSize(gibbs_mu),
effectiveSize(hmc_mu)) %>%
knitr::kable(format = "markdown", digits = 1)
c("MH" = effectiveSize(mh_mu),
"Gibbs" = effectiveSize(gibbs_mu),
"HMC" = effectiveSize(hmc_mu)) %>%
knitr::kable(format = "markdown", digits = 1)
c("MH" = effectiveSize(mh_mu),
"Gibbs" = effectiveSize(gibbs_mu),
"HMC" = effectiveSize(hmc_mu))
c("MH" = effectiveSize(mh_mu),
"Gibbs" = effectiveSize(gibbs_mu),
"HMC" = effectiveSize(hmc_mu))
effectiveSize(hmc_mu)
?effectiveSize
hmc_mu
names(hmc_mu)
c("MH" = effectiveSize(mh_mu),
"Gibbs" = effectiveSize(gibbs_mu),
"HMC" = effectiveSize(hmc_mu))
c("MH" = effectiveSize(mh_mu),
"Gibbs" = effectiveSize(gibbs_mu),
"HMC" = effectiveSize(hmc_mu)) %>%
knitr::kable(format = "markdown", digits = 1)
c("MH" = effectiveSize(mh_mu),
"Gibbs" = effectiveSize(gibbs_mu),
"HMC" = effectiveSize(hmc_mu)) %>%
knitr::kable(format = "markdown", digits = 1,
col.names = "Effective Sample Size")
foo <- c("MH" = effectiveSize(mh_mu),
"Gibbs" = effectiveSize(gibbs_mu),
"HMC" = effectiveSize(hmc_mu)) %>%
knitr::kable(format = "markdown", digits = 1,
col.names = "Effective Sample Size")
foo
foo <- c("MH" = effectiveSize(mh_mu),
"Gibbs" = effectiveSize(gibbs_mu),
"HMC" = effectiveSize(hmc_mu)) %>%
knitr::kable(format = "latex", digits = 1,
col.names = "Effective Sample Size")
foo
ggplot(post_mus, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(~ method)
mh_sigma <- mcmc(nig_mh$samples[[2]][1001:(S-1)])
gibbs_sigma <- mcmc(nig_gibbs[1001:(S-1), 2])
hmc_sigma <- mcmc(nig_hmc$samples[1001:(S-1), 2])
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(iter = row_number())
post_sigmas <- data_frame(mh_sigma, gibbs_sigma, hmc_sigma) %>%
mutate(iter = row_number())
posts <- cbind(post_mus, post_sigmas) %>%
gather(key = method, value = sample, -iter)
posts <- cbind(post_mus, post_sigmas)
View(posts)
posts <- cbind(post_mus, post_sigmas) %>%
mutate(iter = row_number()) %>%
gather(key = method, value = sample, -iter)
posts <- cbind(post_mus, post_sigmas) %>%
mutate(iter = row_number())
rm(post_mus)
rm(post_sigmas)
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu)
post_sigmas <- data_frame(mh_sigma, gibbs_sigma, hmc_sigma)
posts <- cbind(post_mus, post_sigmas) %>%
mutate(iter = row_number()) %>%
gather(key = method, value = sample, -iter)
View(posts)
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(type = "mean")
post_sigmas <- data_frame(mh_sigma, gibbs_sigma, hmc_sigma) %>%
mutate(type = "var")
%
posts <- cbind(post_mus, post_sigmas) %>%
mutate(iter = row_number()) %>%
gather(key = method, value = sample, -iter)
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(type = "mean")
post_sigmas <- data_frame(mh_sigma, gibbs_sigma, hmc_sigma) %>%
mutate(type = "var")
posts <- cbind(post_mus, post_sigmas) %>%
mutate(iter = row_number()) %>%
gather(key = method, value = sample, -iter, -type)
View(post_mus)
posts <- cbind(post_mus, post_sigmas) %>%
mutate(iter = row_number())
rbind(post_mus, post_sigmas)
post_mus <- data_frame(mh_mu, gibbs_mu, hmc_mu) %>%
mutate(type = "mean") %>%
mutate(iter = row_number()) %>%
gather(key = method, value = sample, -iter, -type)
View(post_mus)
post_sigmas <- data_frame(mh_sigma, gibbs_sigma, hmc_sigma) %>%
mutate(type = "var") %>%
mutate(iter = row_number()) %>%
gather(key = method, value = sample, -iter, -type)
posts <- rbind(post_mus, post_sigmas)
View(posts)
ggplot(post_mus, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(type ~ method)
View(post_sigmas)
View(post_mus)
View(post_sigmas)
data_frame(mh_mu, gibbs_mu, hmc_mu,
mh_sigma, gibbs_sigma, hmc_sigma)
ggplot(posts, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(type ~ method)
post_mus <-
data_frame(mh = mh_mu, gibbs = gibbs_mu, hmc = hmc_mu) %>%
mutate(type = "mean") %>%
mutate(iter = row_number()) %>%
gather(key = method, value = sample, -iter, -type)
post_sigmas <-
data_frame(mh = mh_sigma, gibbs = gibbs_sigma, hmc = hmc_sigma) %>%
mutate(type = "var") %>%
mutate(iter = row_number()) %>%
gather(key = method, value = sample, -iter, -type)
posts <- rbind(post_mus, post_sigmas)
ggplot(posts, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(type ~ method)
ggplot(posts, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(type ~ method, scales = "free")
ggplot(posts, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(type ~ method, scales = "free") %>%
ggsave(plot = ., filename = "images/nig_trace")
ggplot(posts, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(type ~ method, scales = "free") %>%
ggsave(plot = ., filename = "images/nig_trace", device = "pdf")
nig_trace <- ggplot(posts, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(type ~ method, scales = "free") %>%
""
nig_trace <- ggplot(posts, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(type ~ method, scales = "free")
ggsave(plot = nig_trace, filename = "images/nig_trace", device = "pdf")
?ggsave
nig_trace <- ggplot(posts, aes(x = iter, y = sample)) +
geom_path() +
facet_grid(type ~ method, scales = "free")
ggsave(plot = nig_trace, filename = "images/nig_trace.pdf", device = "pdf")
ggsave(plot = nig_trace, filename = "images/nig_trace.svg", device = "svg")
ggsave(plot = nig_trace, filename = "images/nig_trace.eps", device = "eps")
ggsave(plot = nig_trace, filename = "images/nig_trace.png", device = "png")
ggsave(plot = nig_trace, filename = "images/nig_trace.png", device = "png",
scale = .6)
ggsave(plot = nig_trace, filename = "images/nig_trace.png", device = "png",
width = 4)
ggsave(plot = nig_trace, filename = "images/nig_trace.png", device = "png",
width = 4, height = 4)
ggsave(plot = nig_trace, filename = "images/nig_trace.png", device = "png",
width = 4, height = 4, units = "in")
acf(mh_mu)
acf(gibbs_mu)
acf(hmc_mu)
acf(gibbs_mu)
acf(mh_mu)
acf(hmc_mu)
acf(gibbs_mu)
coda::densplot(hmc_sigma)
plot_grid <- seq(-4, 4, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 100)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(-4, 4, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 100)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(.01, 50, .01)
hist(nig_mh$samples[[2]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, dinvgamma(plot_grid, alpha, bet))
plot_grid <- seq(-2, 2, .01)
hist(nig_gibbs[, 1], breaks = 25, probability = TRUE)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau), df = 2 * alpha))
plot_grid <- seq(0, 60, .1)
hist(nig_gibbs[, 2], breaks = 25, xlim = c(0, 100), probability = TRUE)
lines(plot_grid, dinvgamma(plot_grid, alpha, bet))
plot_grid <- seq(-2, 2, .01)
hist(nig_gibbs[, 1], breaks = 25, probability = TRUE)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau), df = 2 * alpha))
plot_grid <- seq(-4, 4, .01)
hist(nig_mh$samples[[1]][101:S, ], probability = TRUE, breaks = 100)
lines(plot_grid,
dt(sqrt(alpha * lambda / bet) * (plot_grid - tau) , df = 2 * alpha))
plot_grid <- seq(.01, 50, .01)
hist(nig_mh$samples[[2]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, dinvgamma(plot_grid, alpha, bet))
?save.image
plot_grid <- seq(.01, 50, .01)
p <- hist(nig_mh$samples[[2]][101:S, ], probability = TRUE, breaks = 25)
lines(plot_grid, dinvgamma(plot_grid, alpha, bet))
p
print(p)
plot_grid <- seq(.01, 50, .01)
hist(nig_mh$samples[[2]][101:S, ], probability = TRUE, breaks = 25)
p <- lines(plot_grid, dinvgamma(plot_grid, alpha, bet))
post_sigmas
post_sigmas %>%
ggplot(aes(y = sample)) +
geom_histogram() +
facet_wrap(~ method)
post_sigmas %>%
ggplot(aes(x = sample)) +
geom_histogram() +
facet_wrap(~ method)
post_sigmas %>%
ggplot(aes(x = sample)) +
geom_density() +
facet_wrap(~ method)
plot_grid <- seq(10, 40, .01)
true_sigma <- data_frame(x = plot_grid, y = dinvgamma(plot_grid, alpha, bet))
nig_sigma_dens <- post_sigmas %>%
ggplot(aes(x = sample)) +
geom_path(data = true_sigma, aes(x, y)) +
geom_density() +
facet_wrap(~ method)
nig_sigma_dens
nig_sigma_dens <- post_sigmas %>%
ggplot(aes(x = sample)) +
geom_path(data = true_sigma, aes(x, y), color = "blue") +
geom_density() +
facet_wrap(~ method) +
labs(x = "x", y = "density")
nig_sigma_dens
nig_sigma_dens <- post_sigmas %>%
ggplot(aes(x = sample)) +
geom_path(data = true_sigma, aes(x, y), color = "blue") +
guides() +
geom_density() +
facet_wrap(~ method) +
labs(x = "x", y = "density")
nig_sigma_dens <- post_sigmas %>%
ggplot(aes(x = sample)) +
geom_path(data = true_sigma, aes(x, y), color = "blue") +
geom_density() +
facet_wrap(~ method) +
labs(x = "x", y = "density")
nig_sigma_dens <- post_sigmas %>%
ggplot(aes(x = sample)) +
geom_path(data = true_sigma, aes(x, y), color = "blue") +
geom_density() +
facet_wrap(~ method) +
labs(x = "x", y = "density") +
scale_color_manual(values = c("Samples", "True Density"))
nig_sigma_dens
ggsave(plot = nig_sigma_dens, filename = "images/nig_dens.png", device = "png")
nig_sigma_dens <- post_sigmas %>%
ggplot(aes(x = sample)) +
geom_path(data = true_sigma, aes(x, y), color = "blue") +
geom_density() +
facet_wrap(~ method) +
labs(x = "x", y = "density")
ggsave(plot = nig_sigma_dens, filename = "images/nig_dens.png", device = "png")
ggsave(plot = nig_sigma_dens, filename = "images/nig_dens.png", device = "png",
width = 7, height = 4)
